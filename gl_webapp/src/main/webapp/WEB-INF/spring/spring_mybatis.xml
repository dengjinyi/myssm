<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 扫描service -->
	<context:component-scan base-package="org.com.framework.service"/>
	
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${db.driver}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="minPoolSize" value="2" />
		<property name="maxPoolSize" value="10" />
		<property name="initialPoolSize" value="2" />
		<property name="maxStatements" value="0" /> 
		<property name="acquireIncrement" value="3" />
		<property name="acquireRetryAttempts" value="10" />
		<property name="acquireRetryDelay" value="100" />
		<property name="checkoutTimeout" value="1000" />
		<property name="maxIdleTime" value="28800" />
		<property name="idleConnectionTestPeriod" value="60" />
		<property name="testConnectionOnCheckin" value="true" />
		<property name="breakAfterAcquireFailure"  value="false" /> 
	</bean> 


	<!-- 2. 创建SqlSession的工厂 -->
    <!-- dataSource:引用数据源，统一加载配置--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 数据库连接池 -->  
        <property name="dataSource" ref="dataSource" />  
        <!-- 加载mybatis的全局配置文件 -->  
        <property name="configLocation" value="classpath:mybatis-config.xml" />  
        <!-- <property name="mapperLocations" value="classpath:mappers/../*Mapper.xml"></property>  这里另外配置mapper.xml路径 -->  
       <!--  <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          使用下面的方式配置参数，一行配置一个
		          <value>
		            helperDialect=mysql
		          </value>
		          <value>
		            offsetAsPageNum=true
		          </value>
		          <value>
		            rowBoundsWithCount=true
		          </value>
		          <value>
		            pageSizeZero=true
		          </value>
		          <value>
		            reasonable=true
		          </value>
		          <value>
		            params=true
		          </value>
		        </property>
		      </bean>
		    </array>
	    </property>   -->
    </bean>  
    
    <!-- 3. 自动扫描加载Sql映射文件/接口 -->
    <bean id="mapperScannerConfigurer"  class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!-- sqlSessionFactoryBeanName：代表延迟加载-->
        <!-- 这个配置的前提条件是：映射接口类文件(.java)和映射XML文件(.xml)需要放在相同的包下（com.demo.mapper）-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- basePackage:指定sql映射文件/接口所在的包（自动扫描）-->
        <property name="basePackage" value="org.com.framework.*.mapper"></property>
    </bean>
    
    
    <!-- 4. 事务管理 --> 
    <!-- dataSource:引用上面定义的数据源 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 5. 使用声明式事务 -->
    <!-- transaction-manager：引用上面定义的事务管理器 -->
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
 
    
    <!-- 定义JdbcTemplate的Bean -->
<!-- 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean> -->
</beans>
